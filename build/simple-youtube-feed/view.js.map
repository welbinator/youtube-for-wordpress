{"version":3,"file":"simple-youtube-feed/view.js","mappings":"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","sources":["webpack://youtube-for-wordpress/./src/simple-youtube-feed/view.js"],"sourcesContent":["document.addEventListener(\"DOMContentLoaded\", async () => {\n    const container = document.getElementById(\"youtube-feed-container\");\n\n    // Ensure container is available and not already initialized\n    if (!container) {\n        console.warn(\"YouTube feed container not found.\");\n        return;\n    }\n\n    if (container.hasAttribute('data-initialized')) {\n        return;\n    }\n\n    container.setAttribute('data-initialized', 'true');\n\n    const enableSearch = container.getAttribute('data-enable-search') === 'true';\n    const enablePlaylistFilter = container.getAttribute('data-enable-playlist-filter') === 'true';\n    const layout = container.getAttribute('data-layout') || 'grid';\n    const maxVideos = parseInt(container.getAttribute('data-max-videos'), 10) || 10;\n    const selectedPlaylist = container.getAttribute('data-selected-playlist');\n    const apiUrlBase = `https://www.googleapis.com/youtube/v3`;\n\n    // Cache for avoiding repeated queries\n    const cache = {};\n\n    let playlists = [];\n    let nextPageToken = null;\n\n    // Function to fetch playlists\n    async function fetchPlaylists(loadMore = false) {\n        let apiUrl = `${apiUrlBase}/playlists?part=snippet&channelId=${YT_FOR_WP.channelId}&key=${YT_FOR_WP.apiKey}&maxResults=50`;\n        if (nextPageToken && loadMore) {\n            apiUrl += `&pageToken=${nextPageToken}`;\n        }\n\n        try {\n            const response = await fetch(apiUrl);\n            const data = await response.json();\n            \n            if (data.items) {\n                playlists = loadMore ? [...playlists, ...data.items] : [{ id: '', snippet: { title: 'All Videos' } }, ...data.items];\n            }\n            nextPageToken = data.nextPageToken || null;\n            renderLoadMoreButton();\n        } catch (error) {\n            console.error('Error fetching playlists:', error);\n        }\n    }\n\n    // Render the \"Load More\" button only if there are more playlists to load\n    function renderLoadMoreButton() {\n        const filterContainer = document.querySelector(\".youtube-filter-container\");\n        if (!filterContainer) {\n            console.warn(\"Filter container not found for Load More button.\");\n            return;\n        }\n        const existingButton = document.querySelector(\".load-more-button\");\n        \n        if (existingButton) existingButton.remove();\n        if (nextPageToken && filterContainer) {\n            const loadMoreButton = document.createElement(\"button\");\n            loadMoreButton.textContent = \"Load More\";\n            loadMoreButton.classList.add(\"load-more-button\");\n            loadMoreButton.addEventListener(\"click\", () => fetchPlaylists(true));\n            filterContainer.appendChild(loadMoreButton);\n        }\n    }\n\n    // Call fetchPlaylists initially to load the first set of playlists\n    await fetchPlaylists();\n\n    // Function to fetch videos\n    async function fetchVideos(searchQuery = '', playlistId = '') {\n        const cacheKey = `${searchQuery}-${playlistId}`;\n        if (cache[cacheKey]) return cache[cacheKey];\n\n        let apiUrl = `${apiUrlBase}/search?part=snippet&type=video&channelId=${YT_FOR_WP.channelId}&maxResults=${maxVideos}&key=${YT_FOR_WP.apiKey}`;\n        if (playlistId) {\n            apiUrl = `${apiUrlBase}/playlistItems?part=snippet&maxResults=${maxVideos}&playlistId=${playlistId}&key=${YT_FOR_WP.apiKey}`;\n        }\n        if (searchQuery) {\n            apiUrl += `&q=${encodeURIComponent(searchQuery)}`;\n        }\n\n        const response = await fetch(apiUrl);\n        const data = await response.json();\n        cache[cacheKey] = data.items || [];\n        return cache[cacheKey];\n    }\n\n    // Create filter container if needed\n    if (enableSearch || enablePlaylistFilter) {\n        const filterContainer = document.createElement(\"div\");\n        filterContainer.classList.add(\"youtube-filter-container\");\n\n        // Render playlist dropdown\n        if (enablePlaylistFilter) {\n            const dropdown = document.createElement(\"select\");\n            dropdown.classList.add(\"youtube-playlist-dropdown\");\n\n            playlists.forEach(({ id, snippet }) => {\n                const option = document.createElement(\"option\");\n                option.value = id;\n                option.textContent = snippet.title;\n                if (id === selectedPlaylist) {\n                    option.selected = true; // Set default option if selected\n                }\n                dropdown.appendChild(option);\n            });\n\n            dropdown.addEventListener(\"change\", async () => {\n                const playlistId = dropdown.value;\n                const searchQuery = document.querySelector(\".youtube-search-bar\")?.value.trim() || '';\n                const videos = await fetchVideos(searchQuery, playlistId);\n                renderVideos(container, videos, layout);\n            });\n\n            filterContainer.appendChild(dropdown);\n        }\n\n        // Render search bar\n        if (enableSearch) {\n            const searchContainer = document.createElement(\"div\");\n            searchContainer.classList.add(\"youtube-search-container\");\n\n            const searchBar = document.createElement(\"input\");\n            searchBar.type = \"text\";\n            searchBar.placeholder = \"Search videos\";\n            searchBar.classList.add(\"youtube-search-bar\");\n\n            const searchButton = document.createElement(\"button\");\n            searchButton.textContent = \"Search\";\n            searchButton.classList.add(\"youtube-search-button\");\n\n            searchBar.addEventListener(\"keypress\", (event) => {\n                if (event.key === \"Enter\") {\n                    event.preventDefault();\n                    searchButton.click();\n                }\n            });\n\n            searchButton.addEventListener(\"click\", async () => {\n                const keyword = searchBar.value.trim();\n                const playlistId = document.querySelector(\".youtube-playlist-dropdown\")?.value || '';\n                const videos = await fetchVideos(keyword, playlistId);\n                renderVideos(container, videos, layout);\n            });\n\n            searchContainer.appendChild(searchBar);\n            searchContainer.appendChild(searchButton);\n            filterContainer.appendChild(searchContainer);\n        }\n\n        container.appendChild(filterContainer);\n    }\n\n    // Initial video load\n    const initialVideos = await fetchVideos();\n    renderVideos(container, initialVideos, layout);\n});\n\nfunction renderVideos(container, videos, layout) {\n    const existingVideoContainer = container.querySelector(\".video-container\");\n    if (existingVideoContainer) {\n        existingVideoContainer.remove();\n    }\n\n    const videoContainer = document.createElement(\"div\");\n    videoContainer.classList.add(\"video-container\", layout === \"grid\" ? \"youtube-feed-grid\" : \"youtube-feed-list\");\n    container.appendChild(videoContainer);\n\n    videos.forEach((video) => {\n        const videoElement = document.createElement(\"div\");\n        videoElement.classList.add(layout === \"grid\" ? \"youtube-video-grid-item\" : \"youtube-video-list-item\");\n\n        const title = video.snippet.title;\n        const description = video.snippet.description;\n        const videoId = video.id.videoId || video.snippet.resourceId?.videoId;\n        const videoUrl = `https://www.youtube.com/embed/${videoId}?vq=hd720`;\n\n        videoElement.innerHTML = `\n            <div class=\"video-iframe-wrapper\">\n                <iframe\n                    src=\"${videoUrl}\"\n                    title=\"${title}\"\n                    class=\"video-iframe\"\n                    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                    allowfullscreen\n                ></iframe>\n            </div>\n            <div class=\"video-info\">\n                <h2 class=\"video-title\">${title}</h2>\n                <p class=\"video-description\">${description}</p>\n            </div>\n        `;\n\n        videoContainer.appendChild(videoElement);\n    });\n}\n"],"names":["document","addEventListener","container","getElementById","console","warn","hasAttribute","setAttribute","enableSearch","getAttribute","enablePlaylistFilter","layout","maxVideos","parseInt","selectedPlaylist","apiUrlBase","cache","playlists","nextPageToken","fetchPlaylists","loadMore","apiUrl","YT_FOR_WP","channelId","apiKey","response","fetch","data","json","items","id","snippet","title","renderLoadMoreButton","error","filterContainer","querySelector","existingButton","remove","loadMoreButton","createElement","textContent","classList","add","appendChild","fetchVideos","searchQuery","playlistId","cacheKey","encodeURIComponent","dropdown","forEach","option","value","selected","trim","videos","renderVideos","searchContainer","searchBar","type","placeholder","searchButton","event","key","preventDefault","click","keyword","initialVideos","existingVideoContainer","videoContainer","video","videoElement","description","videoId","resourceId","videoUrl","innerHTML"],"sourceRoot":""}