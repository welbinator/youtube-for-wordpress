{"version":3,"file":"simple-youtube-feed/view.js","mappings":"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","sources":["webpack://youtube-for-wordpress/./src/simple-youtube-feed/view.js"],"sourcesContent":["document.addEventListener(\"DOMContentLoaded\", async () => {\n    const container = document.getElementById(\"youtube-feed-container\");\n\n    // Ensure container is available and not already initialized\n    if (!container) {\n        console.warn(\"YouTube feed container not found.\");\n        return;\n    }\n\n    if (container.hasAttribute('data-initialized')) {\n        return;\n    }\n\n    container.setAttribute('data-initialized', 'true');\n\n    const enableSearch = container.getAttribute('data-enable-search') === 'true';\n    const layout = container.getAttribute('data-layout') || 'grid';\n    const maxVideos = parseInt(container.getAttribute('data-max-videos'), 10) || 10;\n    const selectedPlaylist = container.getAttribute('data-selected-playlist');\n    const apiUrlBase = `https://www.googleapis.com/youtube/v3`;\n\n    // Function to perform API fetch, with caching by query term\n    const cache = {};\n    async function fetchVideos(searchQuery = '') {\n        // Use cache to avoid duplicate queries for the same search term\n        if (cache[searchQuery]) {\n            return cache[searchQuery];\n        }\n\n        let apiUrl = `${apiUrlBase}/search?part=snippet&type=video&channelId=${YT_FOR_WP.channelId}&maxResults=${maxVideos}&key=${YT_FOR_WP.apiKey}`;\n        \n        if (selectedPlaylist) {\n            apiUrl = `${apiUrlBase}/playlistItems?part=snippet&maxResults=${maxVideos}&playlistId=${selectedPlaylist}&key=${YT_FOR_WP.apiKey}`;\n        }\n\n        // Add search query parameter if provided\n        if (searchQuery) {\n            apiUrl += `&q=${encodeURIComponent(searchQuery)}`;\n        }\n\n        const response = await fetch(apiUrl);\n        const data = await response.json();\n\n        // Store the response in cache\n        cache[searchQuery] = data.items || [];\n        return cache[searchQuery];\n    }\n\n    // Render the search bar if enabled\n    if (enableSearch) {\n        const searchContainer = document.createElement(\"div\");\n        searchContainer.classList.add(\"youtube-search-container\");\n\n        const searchBar = document.createElement(\"input\");\n        searchBar.type = \"text\";\n        searchBar.placeholder = \"Search videos\";\n        searchBar.classList.add(\"youtube-search-bar\");\n\n        const searchButton = document.createElement(\"button\");\n        searchButton.textContent = \"Search\";\n        searchButton.classList.add(\"youtube-search-button\");\n\n        searchBar.addEventListener(\"keypress\", (event) => {\n            if (event.key === \"Enter\") {\n                event.preventDefault(); // Prevent form submission if inside a form\n                searchButton.click(); // Trigger search button click\n            }\n        });\n\n        searchButton.addEventListener(\"click\", async () => {\n            const keyword = searchBar.value.trim();\n            if (keyword) {\n                const videos = await fetchVideos(keyword);\n                renderVideos(container, videos, layout);\n            }\n        });\n\n        searchContainer.appendChild(searchBar);\n        searchContainer.appendChild(searchButton);\n        container.appendChild(searchContainer);\n    }\n\n    // Initial video load, check if cached before calling API\n    const initialVideos = await fetchVideos();\n    renderVideos(container, initialVideos, layout);\n});\n\nfunction renderVideos(container, videos, layout) {\n    // Clear out any existing videos without affecting the search bar\n    const existingVideoContainer = container.querySelector(\".video-container\");\n    if (existingVideoContainer) {\n        existingVideoContainer.remove();\n    }\n\n    const videoContainer = document.createElement(\"div\");\n    videoContainer.classList.add(\"video-container\", layout === \"grid\" ? \"youtube-feed-grid\" : \"youtube-feed-list\");\n    container.appendChild(videoContainer);\n\n    videos.forEach(video => {\n        const videoElement = document.createElement(\"div\");\n        videoElement.classList.add(layout === \"grid\" ? \"youtube-video-grid-item\" : \"youtube-video-list-item\");\n\n        const title = video.snippet.title;\n        const description = video.snippet.description;\n        const videoId = video.id.videoId || video.snippet.resourceId?.videoId;\n        const videoUrl = `https://www.youtube.com/embed/${videoId}?vq=hd720`;\n\n        videoElement.innerHTML = `\n            <div class=\"video-iframe-wrapper\">\n                <iframe\n                    src=\"${videoUrl}\"\n                    title=\"${title}\"\n                    class=\"video-iframe\"\n                    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                    allowfullscreen\n                ></iframe>\n            </div>\n            <div class=\"video-info\">\n                <h2 class=\"video-title\">${title}</h2>\n                <p class=\"video-description\">${description}</p>\n            </div>\n        `;\n\n        videoContainer.appendChild(videoElement);\n    });\n}\n"],"names":["document","addEventListener","container","getElementById","console","warn","hasAttribute","setAttribute","enableSearch","getAttribute","layout","maxVideos","parseInt","selectedPlaylist","apiUrlBase","cache","fetchVideos","searchQuery","apiUrl","YT_FOR_WP","channelId","apiKey","encodeURIComponent","response","fetch","data","json","items","searchContainer","createElement","classList","add","searchBar","type","placeholder","searchButton","textContent","event","key","preventDefault","click","keyword","value","trim","videos","renderVideos","appendChild","initialVideos","existingVideoContainer","querySelector","remove","videoContainer","forEach","video","videoElement","title","snippet","description","videoId","id","resourceId","videoUrl","innerHTML"],"sourceRoot":""}