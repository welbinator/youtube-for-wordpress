{"version":3,"file":"simple-youtube-feed/view.js","mappings":"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","sources":["webpack://youtube-for-wordpress/./src/simple-youtube-feed/view.js"],"sourcesContent":["document.addEventListener(\"DOMContentLoaded\", () => {\n    const container = document.getElementById(\"youtube-feed-container\");\n\n    // Ensure container and YouTube feed data are available\n    if (!container || typeof youtubeFeedData === 'undefined' || youtubeFeedData.length === 0) {\n        container.innerHTML = \"<p>No videos available.</p>\";\n        return;\n    }\n\n    // Retrieve the layout and max videos from the data attributes\n    const layout = container.getAttribute('data-layout') || 'grid';\n    const maxVideos = parseInt(container.getAttribute('data-max-videos'), 10) || 5;\n\n    // Render based on the selected layout and limit the number of videos\n    const videosToDisplay = youtubeFeedData.slice(0, maxVideos);\n    if (layout === 'grid') {\n        renderGridLayout(container, videosToDisplay);\n    } else {\n        renderListLayout(container, videosToDisplay);\n    }\n});\n\nfunction renderGridLayout(container, videos) {\n    container.innerHTML = \"\"; // Clear previous content\n    const gridContainer = document.createElement(\"div\");\n    gridContainer.classList.add(\"youtube-feed-grid\");\n    container.appendChild(gridContainer);\n\n    videos.forEach(video => {\n        const videoElement = document.createElement(\"div\");\n        videoElement.classList.add(\"youtube-video-card\");\n\n        const title = video.snippet.title;\n        const description = video.snippet.description;\n        const videoUrl = `https://www.youtube.com/embed/${video.id.videoId}`;\n\n        videoElement.innerHTML = `\n            <div class=\"video-iframe-wrapper\">\n                <iframe\n                    src=\"${videoUrl}\"\n                    title=\"${title}\"\n                    class=\"video-iframe\"\n                    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                    allowfullscreen\n                ></iframe>\n            </div>\n            <div class=\"video-info\">\n                <h2 class=\"video-title\">${title}</h2>\n                <p class=\"video-description\">${description}</p>\n            </div>\n        `;\n\n        gridContainer.appendChild(videoElement);\n    });\n}\n\nfunction renderListLayout(container, videos) {\n    container.innerHTML = \"\"; // Clear previous content\n    const listContainer = document.createElement(\"div\");\n    listContainer.classList.add(\"youtube-feed-list\");\n    container.appendChild(listContainer);\n\n    videos.forEach(video => {\n        const videoElement = document.createElement(\"div\");\n        videoElement.classList.add(\"youtube-video-list-item\");\n\n        const title = video.snippet.title;\n        const description = video.snippet.description;\n        const videoUrl = `https://www.youtube.com/embed/${video.id.videoId}`;\n\n        videoElement.innerHTML = `\n            <div class=\"video-iframe-wrapper\">\n                <iframe\n                    src=\"${videoUrl}\"\n                    title=\"${title}\"\n                    class=\"video-iframe\"\n                    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                    allowfullscreen\n                ></iframe>\n            </div>\n            <div class=\"video-info\">\n                <h2 class=\"video-title\">${title}</h2>\n                <p class=\"video-description\">${description}</p>\n            </div>\n        `;\n\n        listContainer.appendChild(videoElement);\n    });\n}\n"],"names":["document","addEventListener","container","getElementById","youtubeFeedData","length","innerHTML","layout","getAttribute","maxVideos","parseInt","videosToDisplay","slice","renderGridLayout","renderListLayout","videos","gridContainer","createElement","classList","add","appendChild","forEach","video","videoElement","title","snippet","description","videoUrl","id","videoId","listContainer"],"sourceRoot":""}